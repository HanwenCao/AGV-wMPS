#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <tf/transform_broadcaster.h>
#include <nav_msgs/Odometry.h>
#include <sensor_msgs/Imu.h>
#include <iostream>
using namespace std;


void chatterCallback2(const sensor_msgs::Imu& msg){
	static tf::TransformBroadcaster odom_broadcaster3;

	geometry_msgs::TransformStamped odom_trans;
	odom_trans.header.stamp = msg.header.stamp;


	// imu to laser
	odom_trans.header.frame_id = "imu";
  odom_trans.child_frame_id = "laser";
	odom_trans.transform.translation.x = -1.3829;
  odom_trans.transform.translation.y = 0.4351;
  odom_trans.transform.translation.z = 0;
  odom_trans.transform.rotation.x = 0;
	odom_trans.transform.rotation.y = 0;
	odom_trans.transform.rotation.z = 0;
	odom_trans.transform.rotation.w = 0;
	odom_broadcaster3.sendTransform(odom_trans);
}


int main(int argc, char** argv){
	ros::init(argc, argv, "tf3");
	ros::NodeHandle n;
	ros::Subscriber sub = n.subscribe("imu/data", 1000, chatterCallback2);

	ros::spin();


  return 0;
};
