#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <tf/transform_broadcaster.h>
#include <nav_msgs/Odometry.h>
#include <sensor_msgs/Imu.h>
#include <iostream>
using namespace std;


void chatterCallback2(const sensor_msgs::Imu& msg){
	static tf::TransformBroadcaster odom_broadcaster3;
	static tf::TransformBroadcaster odom_broadcaster4;
	geometry_msgs::TransformStamped odom_trans;
	odom_trans.header.stamp = msg.header.stamp;
  odom_trans.header.frame_id = "base_link";
  odom_trans.child_frame_id = "imu";
	odom_trans.transform.translation.x = 0;
  odom_trans.transform.translation.y = 0;
  odom_trans.transform.translation.z = 0;
  odom_trans.transform.rotation.x = 0;
	odom_trans.transform.rotation.y = 0;
	odom_trans.transform.rotation.z = -0.707;
	odom_trans.transform.rotation.w = 0.707;
	odom_broadcaster3.sendTransform(odom_trans);

}
void chatterCallback(const nav_msgs::Odometry& msg){
	
	//first, we'll publish the transform over tf
  geometry_msgs::TransformStamped odom_trans;
	//tf::TransformBroadcaster odom_broadcaster;
  odom_trans.header.stamp = msg.header.stamp;
  odom_trans.header.frame_id = "odom";
  odom_trans.child_frame_id = "base_link";
	static tf::TransformBroadcaster odom_broadcaster0;
	static tf::TransformBroadcaster odom_broadcaster1;

  odom_trans.transform.translation.x = msg.pose.pose.position.x;
  odom_trans.transform.translation.y = msg.pose.pose.position.y;
  odom_trans.transform.translation.z = 0.0;
  odom_trans.transform.rotation.x = msg.pose.pose.orientation.x;
	odom_trans.transform.rotation.y = msg.pose.pose.orientation.y;
	odom_trans.transform.rotation.z = msg.pose.pose.orientation.z;
	odom_trans.transform.rotation.w = msg.pose.pose.orientation.w;
	//send the transform
	//cout<<odom_trans.transform.translation.x<<" "<<odom_trans.transform.translation.y<<" "<<odom_trans.transform.rotation.x<<" "
	//<<odom_trans.transform.rotation.y<<" "<<odom_trans.transform.rotation.z<<" "<<odom_trans.transform.rotation.w<<" "<<endl;
  odom_broadcaster0.sendTransform(odom_trans);
	//base_link laser 0.435, 1.383, 0.000
	odom_trans.header.frame_id = "base_link";
  odom_trans.child_frame_id = "laser";
	odom_trans.transform.translation.x = 0.435;
  odom_trans.transform.translation.y = 1.383;
  odom_trans.transform.translation.z = 0;
  odom_trans.transform.rotation.x = 0;
	odom_trans.transform.rotation.y = 0;
	odom_trans.transform.rotation.z = -0.707;
	odom_trans.transform.rotation.w = 0.707;
	odom_broadcaster1.sendTransform(odom_trans);
}

int main(int argc, char** argv){
	ros::init(argc, argv, "tf1");
	ros::NodeHandle n;
	ros::Subscriber sub1 = n.subscribe("imu/data", 1000, chatterCallback2);
	ros::Subscriber sub = n.subscribe("odom", 1000, chatterCallback);

	ros::spin();


  return 0;
};
